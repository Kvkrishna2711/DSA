#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <string>
struct Book {
int id;
std::string title;
std::string author;
bool isIssued;
};
std::vector<Book> books;
void addBook() {
int id;
std::string title, author;
std::cout << "Enter book ID: ";
std::cin >> id;
std::cin.ignore();
std::cout << "Enter book title: ";
std::getline(std::cin, title);
std::cout << "Enter book author: ";
std::getline(std::cin, author);
Book newBook = {id, title, author, false};
books.push_back(newBook);
std::cout << "Book added successfully.\n";
}
void searchBookByID() {
int id;
std::cout << "Enter book ID: ";
std::cin >> id;
for (const auto& book : books) {
if (book.id == id) {
std::cout << "Book Found: " << book.title << " by " << book.author <<
"\n";
}
}
return;
std::cout << "Book not found.\n";
}
void searchBookByTitle() {
std::string title;
std::cout << "Enter book title: ";
std::cin.ignore();
std::getline(std::cin, title);
for (const auto& book : books) {
if (book.title == title) {
"\n";
}
}
std::cout << "Book Found: " << book.title << " by " << book.author <<
return;
std::cout << "Book not found.\n";
}
struct IssueRecord {
int bookID;
std::string studentName;
};
std::queue<IssueRecord> issuedBooks;
void issueBook() {
int id;
std::string studentName;
std::cout << "Enter book ID to issue: ";
std::cin >> id;
std::cin.ignore();
std::cout << "Enter student name: ";
std::getline(std::cin, studentName);
for (auto& book : books) {
if (book.id == id && !book.isIssued) {
book.isIssued = true;
issuedBooks.push({id, studentName});
std::cout << "Book issued to " << studentName << ".\n";
return;
}
}
std::cout << "Book is either not available or already issued.\n";
}
void returnBook() {
int id;
std::cout << "Enter book ID to return: ";
std::cin >> id;
for (auto& book : books) {
if (book.id == id && book.isIssued) {
book.isIssued = false;
std::cout << "Book returned successfully.\n";
return;
}
}
std::cout << "Book was notissued.\n";
}
void listBooks() {
std::sort(books.begin(), books.end(), [](const Book& a, const Book& b) {
return a.id < b.id;
});
for (const auto& book : books) {
std::cout << "ID: " << book.id << ", Title: " << book.title << ", Author: " <<
book.author << ", Status: " << (book.isIssued ? "Issued" : "Available") <<
"\n";
}
}
void deleteBook() {
int id;
std::cout << "Enter book ID to delete: ";
std::cin >> id;
books.erase(std::remove_if(books.begin(), books.end(), [id](const Book&
book) {
return book.id == id;
}), books.end());
std::cout << "Book deleted successfully.\n";
}
int main() {
int choice;
do {
std::cout << "\nLibrary Management System\n";
std::cout << "1. Add Book\n";
std::cout << "2. Search Book by ID\n";
std::cout << "3. Search Book by Title\n";
std::cout << "4. Issue Book\n";
std::cout << "5. Return Book\n";
std::cout << "6. List All Books\n";
std::cout << "7. Delete Book\n";
std::cout << "8. Exit\n";
std::cout << "Enter your choice: ";
std::cin >> choice;
switch (choice) {
case 1:
addBook();
break;
case 2:
searchBookByID();
break;
case 3:
searchBookByTitle();
break;
case 4:
issueBook();
break;
case 5:
returnBook();
break;
case 6:
listBooks();
break;
case 7:
deleteBook();
break;
case 8:
std::cout << "Exiting the system.\n";
break;
default:
std::cout << "Invalid choice. Please try again.\n";
}
} while (choice != 8);
return 0;
}
